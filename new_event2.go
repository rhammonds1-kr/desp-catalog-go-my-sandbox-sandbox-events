// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DefaultEventCreated.avsc
 *     EventHeader.avsc
 *     NewEvent2.avsc
 */
package my_sandbox_sandbox_events

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type NewEvent2 struct {
	// header field for this event
	EventHeader EventHeader `json:"eventHeader"`

	NewField1 string `json:"newField1"`
}

const NewEvent2AvroCRC64Fingerprint = "\xaaD\xaf;\x96\xe7J\x8a"

func NewNewEvent2() NewEvent2 {
	r := NewEvent2{}
	r.EventHeader = NewEventHeader()

	return r
}

func DeserializeNewEvent2(r io.Reader) (NewEvent2, error) {
	t := NewNewEvent2()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNewEvent2FromSchema(r io.Reader, schema string) (NewEvent2, error) {
	t := NewNewEvent2()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNewEvent2(r NewEvent2, w io.Writer) error {
	var err error
	err = writeEventHeader(r.EventHeader, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NewField1, w)
	if err != nil {
		return err
	}
	return err
}

func (r NewEvent2) Serialize(w io.Writer) error {
	return writeNewEvent2(r, w)
}

func (r NewEvent2) Schema() string {
	return "{\"doc\":\"\",\"fields\":[{\"doc\":\"header field for this event\",\"name\":\"eventHeader\",\"type\":{\"doc\":\"The below fields include header information and should be included on every event in the DESP. Inspired by: https://github.com/cloudevents/spec/blob/v0.2/spec.md\",\"fields\":[{\"doc\":\"A unique identifier of the event - for example, a randomly generated GUID\",\"name\":\"id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Time the event occurred in milliseconds since epoch, UTC timezone.\",\"name\":\"time\",\"type\":\"long\"},{\"doc\":\"Type of occurrence which has happened. Reference the domain.event registered in schema-registry.\",\"name\":\"type\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Service that produced the event. Future: reference to producer registry.\",\"name\":\"source\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}}],\"name\":\"EventHeader\",\"namespace\":\"com.kroger.desp.commons.desp.sandbox\",\"type\":\"record\"}},{\"doc\":\"\",\"name\":\"newField1\",\"type\":\"string\"}],\"name\":\"com.kroger.desp.events.desp.sandbox.NewEvent2\",\"type\":\"record\"}"
}

func (r NewEvent2) SchemaName() string {
	return "com.kroger.desp.events.desp.sandbox.NewEvent2"
}

func (_ NewEvent2) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NewEvent2) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NewEvent2) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NewEvent2) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NewEvent2) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NewEvent2) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NewEvent2) SetString(v string)   { panic("Unsupported operation") }
func (_ NewEvent2) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NewEvent2) Get(i int) types.Field {
	switch i {
	case 0:
		r.EventHeader = NewEventHeader()

		return &types.Record{Target: &r.EventHeader}
	case 1:
		return &types.String{Target: &r.NewField1}
	}
	panic("Unknown field index")
}

func (r *NewEvent2) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NewEvent2) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NewEvent2) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NewEvent2) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NewEvent2) Finalize()                        {}

func (_ NewEvent2) AvroCRC64Fingerprint() []byte {
	return []byte(NewEvent2AvroCRC64Fingerprint)
}

func (r NewEvent2) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["eventHeader"], err = json.Marshal(r.EventHeader)
	if err != nil {
		return nil, err
	}
	output["newField1"], err = json.Marshal(r.NewField1)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NewEvent2) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["eventHeader"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventHeader); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eventHeader")
	}
	val = func() json.RawMessage {
		if v, ok := fields["newField1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NewField1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for newField1")
	}
	return nil
}
